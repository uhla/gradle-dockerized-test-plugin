import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id("java")
  id("com.github.pedjak.dockerized-test") version "0.5.11-SNAPSHOT"
}

apply plugin: 'com.github.pedjak.dockerized-test'

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
  mavenCentral()
  // TODO just temporary
  mavenLocal()
}

dependencies {
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
}

test {
  useJUnitPlatform()

  docker {
    image = 'eclipse-temurin:11-jre-alpine'



// Windows testing
    //    // use podman docker engine npipe on win, docker on linux
    // TODO add to readme docs
//    socketAddress = Os.isFamily(Os.FAMILY_WINDOWS) ? 'npipe:////./pipe/docker_engine' : 'unix:///var/run/docker.sock'

//    // TODO figure out volume binding on windows to linux if possible (probably needs explicit redefinition in plugin config)
//    volumes = ["c:":"/C"]
//
//    ref: https://github.com/pedjak/gradle-dockerized-test-plugin/issues/13
//    // TODO a bit hacky way of remapping windows containers
//    beforeContainerCreate = { cmd ->
//      println cmd.cmd
//      // TODO wanna arg that starts with @ --> find it instead of hardcoded index
//      def file = new File(cmd.cmd[4].substring(1))
//
//      file.text = fixPath(file.text)
//
//      cmd.withWorkingDir(fixPath(project.rootDir.absolutePath))
//      cmd.withEnv([])
//      cmd.withCmd(cmd.cmd.collect{fixPath(it)})
//    }
  }
}

//private String fixPath(String path) {
//  path.replaceAll("\\\\", "/").replaceAll("C:", "/C").replaceAll("//", "/").replaceAll(";", ":")
//}

